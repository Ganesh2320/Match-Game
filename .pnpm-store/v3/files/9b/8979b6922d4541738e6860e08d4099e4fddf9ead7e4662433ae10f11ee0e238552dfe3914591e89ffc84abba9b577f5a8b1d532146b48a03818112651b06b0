"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const docker_compose_1 = __importDefault(require("docker-compose"));
const child_process_1 = require("child_process");
async function default_1(projectName, gsServiceVersion, devcontainerDir, composeOptions, mongodb, postgresql) {
    // If mongoDb is selected then start mongoDb containers and set mongo cluster.
    if (mongodb) {
        console.log("Pulling mongodb...");
        // Start .devcontainer
        await docker_compose_1.default
            .upMany([`mongodb1`, `mongodb2`, `mongodb3`], composeOptions)
            .then(() => {
            console.log("mongodb containers started");
        }, (err) => {
            console.error("Error in starting mongodb containers:", err.message);
        });
        console.log("Creating replica set for mongodb");
        await docker_compose_1.default
            .exec(`mongodb1`, "bash /scripts/mongodb_rs_init.sh", composeOptions)
            .then(() => {
            console.log("Creating replica set is done for mongodb");
        }, (err) => {
            console.error("Error in creating replica set for mongodb:", err.message);
        });
    }
    console.log("Pulling framework Image...");
    const res = (0, child_process_1.execSync)(`docker pull godspeedsystems/gs-node-service:${gsServiceVersion}`);
    let commandOptions = [];
    console.log("Building framework Image...");
    await docker_compose_1.default
        .buildOne("node", {
        ...composeOptions,
        commandOptions,
    })
        .then(() => { }, (err) => {
        console.error("Error in building container:", err.message);
    });
    if (mongodb || postgresql) {
        console.log("Generating prisma modules");
        await docker_compose_1.default
            .run("node", [
            "/bin/bash",
            "-c",
            "for i in src/datasources/*.prisma; do npx --yes prisma generate --schema $i && npx --yes prisma db push --schema $i; done",
        ], composeOptions)
            .then(() => {
            console.log("prisma modules generated");
        }, (err) => {
            console.error("Error in generating prisma clients:", err.message);
        });
    }
    // docker compose -p <projectname_devcontainer> stop
    await docker_compose_1.default.stop(composeOptions).then(() => {
        console.log('"docker compose stop" done');
    }, (err) => {
        console.error('Error in "docker compose stop":', err.message);
    });
}
exports.default = default_1;
//# sourceMappingURL=prepareContainers.js.map