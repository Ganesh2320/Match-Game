"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const docker_compose_1 = __importDefault(require("docker-compose"));
const utils_1 = require("../utils");
const axios_1 = __importDefault(require("axios"));
const replace_in_file_1 = require("replace-in-file");
const fs_1 = __importDefault(require("fs"));
const prepareContainers_1 = __importDefault(require("../utils/prepareContainers"));
/*
 * function to update GS Project
 */
async function default_1(composeOptions) {
    let gs;
    try {
        gs = JSON.parse(fs_1.default.readFileSync(path_1.default.join(process.cwd(), ".godspeed"), "utf-8"));
        const projectDir = process.cwd();
        const devcontainerDir = path_1.default.resolve(projectDir, ".devcontainer");
        let { projectName, mongodb, mongoDbName, postgresql, postgresDbName, kafka, elasticsearch, redis, userUID, svcPort, elasticsearchPort, postgresDbPort, zookeeperPort, kafkaPort, redisPort, mongoDb1Port, mongoDb2Port, mongoDb3Port, } = gs;
        composeOptions.cwd = devcontainerDir;
        composeOptions.composeOptions.push(`${projectName}_devcontainer`);
        try {
            if (!gs.mongodb) {
                mongodb = (0, utils_1.ask)("Do you need mongodb? [y/n] ");
                if (mongodb) {
                    mongoDbName =
                        (0, utils_1.prompt)("Please enter name of the mongo database [default: test] ") || "test";
                    mongoDb1Port = Number((0, utils_1.prompt)("Please enter host port for mongodb1 [default: 27017] ") ||
                        27017);
                    mongoDb2Port = Number((0, utils_1.prompt)("Please enter host port for mongodb2 [default: 27018] ") ||
                        27018);
                    mongoDb3Port = Number((0, utils_1.prompt)("Please enter host port for mongodb3 [default: 27019] ") ||
                        27019);
                }
            }
            if (!gs.postgresql) {
                postgresql = (0, utils_1.ask)("Do you need postgresdb? [y/n] ");
                if (postgresql) {
                    postgresDbName =
                        (0, utils_1.prompt)("Please enter name of the postgres database [default: test] ") || "test";
                    postgresDbPort = Number((0, utils_1.prompt)("Please enter host port for postgres [default: 5432] ") ||
                        5432);
                }
            }
            if (!gs.kafka) {
                kafka = (0, utils_1.ask)("Do you need kafka? [y/n] ");
                if (kafka) {
                    kafkaPort = Number((0, utils_1.prompt)("Please enter host port for kafka [default: 9092] ") || 9092);
                    zookeeperPort = Number((0, utils_1.prompt)("Please enter host port for zookeeper [default: 2181] ") ||
                        2181);
                }
            }
            if (!gs.elasticsearch) {
                elasticsearch = (0, utils_1.ask)("Do you need elastisearch? [y/n] ");
                if (elasticsearch) {
                    elasticsearchPort = Number((0, utils_1.prompt)("Please enter host port for elasticsearch [default: 9200] ") || 9200);
                }
            }
            if (!gs.redis) {
                redis = (0, utils_1.ask)("Do you need redis? [y/n] ");
                if (redis) {
                    redisPort = Number((0, utils_1.prompt)("Please enter host port for redis [default: 6379] ") || 6379);
                }
            }
            svcPort = Number((0, utils_1.prompt)(`Please enter host port on which you want to run your service [current: ${gs.svcPort}] `) || gs.svcPort);
            // Ask user about release version information of gs_service and change version in Dockerfile
            console.log("Fetching release version information...");
            const versions = await axios_1.default.get(`${process.env.DOCKER_REGISTRY_URL}`);
            const availableVersions = versions.data.results
                .map((s) => s.name)
                .join("\n");
            console.log(`Please select release version of gs_service from the available list:\n${availableVersions}`);
            const gsServiceVersion = (0, utils_1.prompt)("Enter your version [default: latest] ") || "latest";
            console.log(`Selected version ${gsServiceVersion}`);
            // update mechanism for root level Dockerfile
            (0, utils_1.generateFileFromTemplate)(path_1.default.resolve(devcontainerDir, "Dockerfile.ejs"), path_1.default.resolve(devcontainerDir, "Dockerfile"), {
                dockerRegistry: process.env.DOCKER_REGISTRY,
                dockerPackageName: process.env.DOCKER_PACKAGE_NAME,
                tag: gsServiceVersion,
            });
            // Fetching UID information
            userUID = (0, utils_1.userID)();
            console.log("User ID is", userUID);
            // generate devcinteiner.json from template
            (0, utils_1.generateFileFromTemplate)(path_1.default.resolve(devcontainerDir, "devcontainer.json.ejs"), path_1.default.resolve(devcontainerDir, "devcontainer.json"), { projectName, svcPort });
            // generate docker-compose.yml from template
            (0, utils_1.generateFileFromTemplate)(path_1.default.resolve(devcontainerDir, "docker-compose.yml.ejs"), path_1.default.resolve(devcontainerDir, "docker-compose.yml"), {
                projectName,
                mongodb,
                mongoDbName,
                postgresql,
                postgresDbName,
                kafka,
                elasticsearch,
                redis,
                userUID,
                svcPort,
                elasticsearchPort,
                postgresDbPort,
                zookeeperPort,
                kafkaPort,
                redisPort,
                mongoDb1Port,
                mongoDb2Port,
                mongoDb3Port,
            });
            // generate mongodb_rs_init.sh from template available at `${projectDir}/.devcontainer/scripts/mongodb_rs_init.sh.ejs`
            (0, utils_1.generateFileFromTemplate)(path_1.default.resolve(devcontainerDir, "scripts/mongodb_rs_init.sh.ejs"), path_1.default.resolve(devcontainerDir, "scripts/mongodb_rs_init.sh"), { projectName, mongoDbName });
            await (0, replace_in_file_1.replaceInFile)({
                files: devcontainerDir + "/scripts/*",
                from: /\r\n/g,
                to: "\n",
            });
            if (process.platform != "win32") {
                const res = (0, child_process_1.execSync)(`chmod 755 ${devcontainerDir}/scripts/mongodb_init.sh ${devcontainerDir}/scripts/mongodb_rs_init.sh`);
            }
            // docker compose -p <projectname_devcontainer> down --remove-orphans
            await docker_compose_1.default
                .down({
                ...composeOptions,
                commandOptions: ["--remove-orphans"],
            })
                .then(() => {
                console.log('"docker compose down" done');
            }, (err) => {
                console.error('Error in "docker compose down":', err.message);
            });
            // // docker kill `docker ps -q`
            // await spawnSync('docker kill `docker ps -q`')
            await (0, prepareContainers_1.default)(projectName, gsServiceVersion, devcontainerDir, composeOptions, mongodb, postgresql);
            fs_1.default.writeFileSync(`.godspeed`, JSON.stringify({
                projectName,
                mongodb,
                mongoDbName,
                postgresql,
                postgresDbName,
                kafka,
                elasticsearch,
                redis,
                svcPort,
                elasticsearchPort,
                postgresDbPort,
                zookeeperPort,
                kafkaPort,
                redisPort,
                mongoDb1Port,
                mongoDb2Port,
                mongoDb3Port,
            }));
            console.log("\n", `godspeed update ${projectName} is done.`);
        }
        catch (ex) {
            console.error(ex.message);
            console.error("\n", `godspeed update ${projectName} is failed cleaning up...`);
        }
    }
    catch (ex) {
        console.error("Run update command from Project Root", ex);
        process.exit(1);
    }
}
exports.default = default_1;
//# sourceMappingURL=update.js.map